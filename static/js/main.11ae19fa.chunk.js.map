{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mapboxgl","accessToken","App","props","state","lng","lat","zoom","mapContainer","React","createRef","this","map","Map","container","current","style","center","params","window","location","search","slice","split","p","reduce","obj","key","value","a","fetch","url","resp","json","on","addSource","type","data","addLayer","id","source","layout","paint","fill","parseFloat","bounds","turf","fitBounds","padding","duration","console","log","loadMap","ref","className","PureComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAKAA,IAASC,YACL,iG,IAEiBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,SACNC,IAAK,QACLC,KAAM,GAER,EAAKC,aAAeC,IAAMC,YAPT,E,qDAUnB,WAAqB,IAAD,EACSC,KAAKP,MAAxBC,EADU,EACVA,IAAKC,EADK,EACLA,IAAKC,EADA,EACAA,KACZK,EAAM,IAAIZ,IAASa,IAAI,CAC3BC,UAAWH,KAAKH,aAAaO,QAC7BC,MAAO,wDACPC,OAAQ,CAACZ,EAAKC,GACdC,KAAMA,IAGFW,EAASC,OAAOC,SAASC,OAC9BC,MAAM,GACNC,MAAM,KACNX,KAAI,SAACY,GAAD,OAAOA,EAAED,MAAM,QACnBE,QAAO,SAACC,EAAD,0BAAOC,EAAP,KAAYC,EAAZ,wBAAC,eAA4BF,GAA7B,kBAAmCC,EAAMC,MAAU,IAbzC,4CAiBlB,8BAAAC,EAAA,sEACqBC,MAAMZ,EAAOa,KADlC,cACQC,EADR,gBAEqBA,EAAKC,OAF1B,OAEQA,EAFR,OAIErB,EAAIsB,GAAG,QAAQ,WAEbtB,EAAIuB,UAAU,OAAQ,CACpBC,KAAM,UACNC,KAAMJ,IAIRrB,EAAI0B,SAAS,CACXC,GAAI,OACJH,KAAM,OACNI,OAAQ,OACRC,OAAQ,GACRC,MAAO,CACL,aAAa,IAAb,OAAkBxB,EAAOyB,MACzB,eAAgBC,WAAW1B,EAAO,oBAItCN,EAAI0B,SAAS,CACXC,GAAI,UACJH,KAAM,OACNI,OAAQ,OACRC,OAAQ,GACRC,MAAO,CACL,aAAa,IAAb,OAAkBxB,EAAOyB,MACzB,aAAc,KAIlB,IAAME,EAASC,OAAUb,GACzBrB,EAAImC,UAAUF,EAAQ,CAAEG,QAAS,IAAKC,SAAU,OAnCpD,4CAjBkB,sBAelBC,QAAQC,IAAIjC,GAfM,mCAuDlBkC,K,oBAGF,WACE,OACE,8BACE,qBAAKC,IAAK1C,KAAKH,aAAc8C,UAAU,wB,GAxEd7C,IAAM8C,eCIxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.11ae19fa.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport mapboxgl from 'mapbox-gl';\nimport * as turf from '@turf/turf';\n\nmapboxgl.accessToken =\n    'pk.eyJ1IjoiY2FzZXltbWlsZXIiLCJhIjoiY2lpeHY1bnJ1MDAyOHVkbHpucnB1dGRmbyJ9.TzUoCLwyeDoLjh3tkDSD4w';\n\nexport default class App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -119.2368,\n      lat: 37.4522,\n      zoom: 5\n    };\n    this.mapContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    const { lng, lat, zoom } = this.state;\n    const map = new mapboxgl.Map({\n      container: this.mapContainer.current,\n      style: 'mapbox://styles/caseymmiler/cktf3jdcs2ws819qttibvokom',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    const params = window.location.search\n    .slice(1)\n    .split('&')\n    .map((p) => p.split('='))\n    .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});\n\n    console.log(params);\n\n    async function loadMap() {\n      const resp = await fetch(params.url);\n      const json = await resp.json();\n  \n      map.on('load', () => {\n        // Add a data source containing GeoJSON data.\n        map.addSource('data', {\n          type: 'geojson',\n          data: json,\n        });\n  \n        // Add a new layer to visualize the polygon.\n        map.addLayer({\n          id: 'data',\n          type: 'fill',\n          source: 'data', // reference the data source\n          layout: {},\n          paint: {\n            'fill-color': `#${params.fill}`, // blue color fill\n            'fill-opacity': parseFloat(params['fill-opacity']),\n          },\n        });\n        // Add a black outline around the polygon.\n        map.addLayer({\n          id: 'outline',\n          type: 'line',\n          source: 'data',\n          layout: {},\n          paint: {\n            'line-color': `#${params.fill}`,\n            'line-width': 2,\n          },\n        });\n  \n        const bounds = turf.bbox(json);\n        map.fitBounds(bounds, { padding: 100, duration: 0 });\n      });\n    }\n    loadMap();\n  }\n\n  render() {\n    return (\n      <div>\n        <div ref={this.mapContainer} className=\"map-container\" />\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}